<?php

namespace App\Form;

use App\Entity\Compte;
use App\Utils\Form\BuilderForm;
use Doctrine\ORM\EntityRepository;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class CompteType extends AbstractType
{
    private $form;
    public function __construct()
    {
        $this->form=new BuilderForm();
    }
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('nomCompte', null, [
                'label_format' => 'compte.NomCompte'
            ])
            ->add('categorie', null, ['label_format' => 'compte.InstalleMaroc'])
            ->add(
                'centreDecision',

                EntityType::class,
                [
                    'class' => 'App\Entity\Pays',
                    'choice_label' => 'nom',
                    'label_format' => 'compte.CentreDecision',
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('p')
                            ->andWhere('p.isDeleted NOT IN (:isDeleted)')
                            ->setParameter('isDeleted', true);
                    }
                ]
            )
            ->add('chiffreAffaires', IntegerType::class,
             ['label_format' => 'Chiffre dâ€™affaires (Milliers/DHs)',
             'required' => false
             ])
            ->add('detailLibre', null, ['label_format' => 'compte.DetailLibre'])
            ->add('signalement', null, ['label_format' => 'compte.Signalement'])
            ->add(
                'type',
                EntityType::class,
                [
                    'class' => 'App\Entity\TypeCompte',
                    'choice_label' => 'nom',
                    // 'multiple' => true,
                    'label_format' => 'compte.Type'
                ]
            )
            ->add(
                'paysSiege',
                EntityType::class,
                [
                    'class' => 'App\Entity\Pays',
                    'choice_label' => 'nom',
                    'required' => true,
                    'label_format' => 'compte.PaysSiege',
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('p')
                            ->andWhere('p.isDeleted NOT IN (:isDeleted)')
                            ->setParameter('isDeleted', true);
                    }
                ]
            )
            ->add(
                'paysImplantationSuccursales',
                EntityType::class,
                [
                    'class' => 'App\Entity\Pays',
                    'choice_label' => 'nom',
                    'multiple' => true,
                    'required' => false,
                    'label_format' => 'compte.paysImplantationSuccursales',
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('p')
                            ->andWhere('p.isDeleted NOT IN (:isDeleted)')
                            ->setParameter('isDeleted', true);
                    }
                ]
            )
            ->add(
                'secteurs',
                EntityType::class,
                [
                    'class' => 'App\Entity\Secteur',
                    'choice_label' => 'nom',
                    'multiple' => true,
                    'required' => false,
                    'label_format' => 'compte.Secteurs',
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('s')
                            ->andWhere('s.isDeleted NOT IN (:isDeleted)')
                            ->setParameter('isDeleted', true);
                    }
                ]
            )
            ->add(
                'ecosystemeFiliere',
                EntityType::class,
                [
                    'class' => 'App\Entity\EcosystemeFiliere',
                    'choice_label' => 'nom',
                    'required' => false,
                    'label_format' => 'compte.EcosystemeFiliere'
                ]
            )
            ->add(
                'responsableCompte',
                EntityType::class,
                [
                    'class' => 'App\Entity\User',
                    'choice_label' => function ($user) {
                        return $user->getPrenom() . " " . $user->getNom();
                    },
                    'label_format' => 'compte.ResponsableCompte',
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('u')
                            ->andWhere('u.isDeleted NOT IN (:isDeleted)')
                            ->setParameter('isDeleted', true);
                    }
                ]
            )
            ->add(
                'etatCompte',
                EntityType::class,
                [
                    'class' => 'App\Entity\EtatCompte',
                    'choice_label' => 'nom',
                    'label_format' => 'compte.EtatCompte',
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('e')
                                  ->andWhere('e.id not in (:val)')
                                  ->setParameter('val',array(5));
                    }
                ]
            )->add('logo', FileType::class,array('data_class' => null,'required' => false));
        $schema = $options['schema_form'];

        $this->form->generateForm($builder, $schema);
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            'data_class' => Compte::class,
            'schema_form' => null
        ]);
    }
}
